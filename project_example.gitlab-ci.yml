# Includes general CI jobs to extend from, where the 
include:
  - project: '[GitLab project with CI]'
    ref: main
    file: test.yml
  - project: '[GitLab project with CI]'
    ref: main
    file: deploy.yml

## Stages ##
stages:
  - test
  - deploy

## Test Jobs ##

### Tests for PHP errors in custom code of a Drupal 8+ site ###
php:
  extends: .php_lint
  variables:
    DIRECTORIES: ./web/themes/custom ./web/modules/custom
    EXTENSIONS: php module theme inc

## Runs tests defined in Playwright scripts ##
playwright_test:
  stage: test
  image: [registry address to image]
  variables:
    SITEMAP_URL: "https://example.com/sitemap.xml"
  before_script:
    # Parses from sitemap into list of URLs
    - curl -s $SITEMAP_URL > sitemap.xml
    - grep -o '<loc>[^<]*</loc>' ./sitemap.xml | sed 's/<loc>\|<\/loc>//g' > /opt/playwright/tests/urls.txt
  script:
    # Copy any site-specific tests to run alongside the general test(s)
    - |
      if [ -d "$CI_PROJECT_DIR/tests" ]; then
        cp -r $CI_PROJECT_DIR/tests/* /opt/playwright/tests/
      fi
    # Move to directory to run Playwright tests
    - cd /opt/playwright
    - npx playwright test
    # Copy results back to the build directory so they can be used as artifacts
    - cp -r /opt/playwright/results $CI_PROJECT_DIR
  artifacts:
    when: always
    paths:
      - results/*
    expire_in: 5 months

## Runs tests using pa11y ##
pa11y_test:
  stage: test
  image: [registry address to image]
  script:
    - pa11y-ci --sitemap $SITEMAP_URL --config /opt/pa11y/config.json --reporter=json > results.json
  allow_failure: true
  artifacts:
    when: always
    paths:
      - results.json
    expire_in: 5 months


## Deploy Jobs ##

### Deploys to dev server only when changes are made to the dev branch ###
deploy_dev:
  extends: 
    - .deploy_template
    - .drupal_composer
    - .drupal_config
  variables:
    ENVIRONMENT_NAME: Development
    SERVER_URL: dev.demo.com
    WEB_ROOT: /opt/www/html
  tags:
    - dev
  only:
    refs:
      - dev

### Deploys to staging server only when changes are made to the main branch ###
deploy_staging:
  extends:
    - .deploy_template
    - .drupal_composer
    - .drupal_config
  variables:
    ENVIRONMENT_NAME: Staging
    SERVER_URL: staging.demo.com
    WEB_ROOT: /opt/www/html
  tags:
    - staging
  only:
    refs:
      - main

### Deploys code to production only when main branch and manually triggered ###
deploy_prod_1:
  extends: 
    - .deploy_template
    - .drupal_composer
  variables:
    ENVIRONMENT_NAME: Prod 1
    SERVER_URL: prod1.demo.com
    WEB_ROOT: /opt/www/html
  tags:
    - prod1
  only:
    refs:
      - main  
  when: manual

deploy_prod_2:
  extends: 
    - .deploy_template
    - .drupal_composer
  variables:
    ENVIRONMENT_NAME: Prod 2
    SERVER_URL: prod2.demo.com
    WEB_ROOT: /opt/www/html
  tags:
    - prod2
  only:
    refs:
      - main  
  when: manual

#### Deploys config updates to production. These need to wait for both servers to have the composer updated code. ####
drupal_install_prod1:
  extends: .drupal_config
  variables:
    ENVIRONMENT_NAME: Production 1
    SERVER_URL: prod1.demo.com
    WEB_ROOT: /opt/www/html
  tags:
    - prod1
  only:
    refs:
      - main
  needs: [deploy_prod1, deploy_prod2]

drupal_install_prod2:
  extends: .drupal_cache
  variables:
    ENVIRONMENT_NAME: Production 2
    SERVER_URL: prod2.demo.com
    WEB_ROOT: /opt/www/html
  tags:
    - prod2
  only:
    refs:
      - main
  needs: [deploy_prod1, deploy_prod2, drupal_install_prod1]