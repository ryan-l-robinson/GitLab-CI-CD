## Build an Oracle Linux 8 container, used by other tests below ##
.ol8_lamp_build:
  stage: test
  image: oraclelinux:8
  before_script:
    - dnf -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
    - dnf -y install https://rpms.remirepo.net/enterprise/remi-release-8.rpm
    - dnf -y module enable php:remi-8.0
    - dnf install -y php php-gd php-pdo zip unzip git php-curl php-mbstring php-zip php-json php-xml php-simplexml php-mysqlnd php-pecl-apcu wget curl
    - php -v
    - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
    - php composer-setup.php
    - php -r "unlink('composer-setup.php');"
    
 ### PHP lint test ###
.php_lint:
  stage: test
  extends: .ol8_lamp_build
  variables:
    DIRECTORIES: "./"
    EXTENSIONS: "php"
  script:
    ## Recursively checks for files of specified extensions in specified directories and completes php lint on them
    - cwd="$(pwd)"
    - |
      for DIRECTORY in $DIRECTORIES 
        do
          cd $DIRECTORY
          for EXT in $EXTENSIONS
            do
              files="$(find -name *.${EXT} -type f)"

              for file in ${files}
                do php -l ${file};
              done;
            done;
          cd $cwd;
        done;

# Accessibility tests #

## Parses from an XML sitemap that must be available publicly by curl, which for many sites will serve as the fastest way to look up all URLs. ##
.parse_xml_sitemap:
  stage: test
  image: [path to image]
  variables:
    SITEMAP_URL: ""
  before_script:
    - curl -s $SITEMAP_URL > sitemap.xml
    - grep -o '<loc>[^<]*</loc>' ./sitemap.xml | sed 's/<loc>\|<\/loc>//g' > /opt/playwright/tests/urls.txt

## Runs tests defined in Playwright scripts. ##
.playwright_test:
  stage: test
  script:
    # Copy any site-specific tests to run alongside the general test(s). #
    - |
      if [ -d "$CI_PROJECT_DIR/tests" ]; then
        cp -r $CI_PROJECT_DIR/tests/* /opt/playwright/tests/
      fi
    # Move to directory and run Playwright tests. #
    - cd /opt/playwright
    - npx playwright test
    # Copy results back to the build directory so they can be used as artifacts. #
    - cp -r /opt/playwright/results $CI_PROJECT_DIR
  artifacts:
    when: always
    paths:
      - results/*
    expire_in: 5 months

## Runs tests using pa11y ##
.pa11y_test:
  stage: test
  image: registry.gitlab.com/wlu-lib-dev/apps/pa11y-docker-gitlab/pa11y:main
  script:
    # Use pa11y-ci's built-in function for scanning from a sitemap. #
    - pa11y-ci --sitemap $SITEMAP_URL --config /opt/pa11y/config.json --reporter=json > results.json
  # Show as warning but don't stop execution of later jobs if failure. #
  allow_failure: true
  # Save the reports for 5 months. #
  artifacts:
    when: always
    paths:
      - results.json
    expire_in: 5 months