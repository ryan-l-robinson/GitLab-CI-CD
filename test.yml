## Build an Oracle Linux 8 container, which could be used by other tests ##
.ol8_lamp_build:
  stage: test
  image: oraclelinux:8
  before_script:
    - dnf -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
    - dnf -y install https://rpms.remirepo.net/enterprise/remi-release-8.rpm
    - dnf -y module enable php:remi-8.0
    - dnf install -y php php-gd php-pdo zip unzip git php-curl php-mbstring php-zip php-json php-xml php-simplexml php-mysqlnd php-pecl-apcu wget curl
    - php -v
    - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
    - php composer-setup.php
    - php -r "unlink('composer-setup.php');"
    
 ### PHP lint test ###
.php_lint:
  stage: test
  image: drupal:php8.1-apache
  variables:
    DIRECTORIES: "./"
    EXTENSIONS: "php"
  script:
    # Recursively checks for files of specified extensions in specified directories and completes php lint on them #
    - cwd="$(pwd)"
    - |
      for DIRECTORY in $DIRECTORIES 
        do
          cd $DIRECTORY
          for EXT in $EXTENSIONS
            do
              files="$(find -name *.${EXT} -type f)"

              for file in ${files}
                do php -l ${file};
              done;
            done;
          cd $cwd;
        done;

# PHP Tests #

## PHP unit tests, usually to be run AFTER building a new image to test against ##
## Runs unit tests only and creates a coverage report to review. ##
.phpunit_unit:
  stage: test
  # Use the web image with all the code prepared, e.g. the one generated by the build_drupal_db job. #
  image: $CI_REGISTRY_IMAGE/web:$CI_COMMIT_REF_SLUG
  variables:
    # Where to find the phpunit installation. #
    PHP_UNIT: "phpunit"
  script:
    - mkdir -p coverage
    - $PHP_UNIT --testsuite=unit --coverage-html $CI_PROJECT_DIR/coverage > phpunit_errors.txt
  # Show as warning but don't stop execution of later jobs if failure. #
  allow_failure: true
  # Save the reports for 5 months, past our next release. #
  artifacts:
    when: always
    paths:
      - coverage/*
      - phpunit_errors.txt
    expire_in: 5 months

## Runs kernel tests, which requires a functioning database. ##
.phpunit_kernel:
  stage: test
  # Update this image version number occasionally. #
  image: docker:25.0.4-dind-alpine3.19
  variables:
    # Where to find the phpunit installation. #
    PHP_UNIT: "phpunit"
    GROUP: "example"
    DB_TAG: $CI_REGISTRY_IMAGE/db:$CI_COMMIT_REF_SLUG
    # Must make the db hostname used in phpunit.xml. #
    DB_HOSTNAME: "db"
    WEB_TAG: $CI_REGISTRY_IMAGE/web:$CI_COMMIT_REF_SLUG
    WEB_HOSTNAME: "web"
  services:
    # Update this image version number occasionally, matching the one above. #
    - docker:25.0.4-dind-alpine3.19
  script:
    - apk add git
    # Login to the GitLab registry using the private unique password provided by GitLab. #
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    # Create the network of web and db. #
    - docker network create --driver="bridge" network
    # Build and run the containers in the network. #
    - docker run -d --net network --name db -h $DB_HOSTNAME $DB_TAG
    - docker run -d --net network --name web -h $WEB_HOSTNAME $WEB_TAG
    # Run the phpunit test. #
    - docker exec --user www-data:www-data web sh -c "$PHP_UNIT --testsuite=kernel --group=${GROUP}" > ${GROUP}_errors.txt
  # Show as warning but don't stop execution of later jobs if failure. #
  allow_failure: true
  # Save the reports for 5 months, past our next release. #
  artifacts:
    when: always
    paths:
      - ${GROUP}_errors.txt
    expire_in: 5 months

# Accessibility tests #

## Runs tests defined in Playwright scripts. ##
## Note: some of these may take a long time, so check your job timeouts and/or split into multiple jobs. ##
.playwright_test:
  stage: test
  image: [path to image, e.g. the one generated by https://github.com/ryan-l-robinson/playwright-axe-Docker-GitLab]
  script:
    # Copy any site-specific tests to run alongside the general test(s). #
    - |
      if [ -d "$CI_PROJECT_DIR/tests" ]; then
        cp -r $CI_PROJECT_DIR/tests/* /opt/playwright/tests/
      fi
    # Save the sitemap which is needed for the sitemap test. #
    - curl -o /opt/playwright/sitemap.xml $SITEMAP_URL
    # Move to directory and run Playwright tests. #
    - cd /opt/playwright
    - npx playwright test
    # Copy results back to the build directory so they can be used as artifacts. #
    - cp -r /opt/playwright/results $CI_PROJECT_DIR
  artifacts:
    when: always
    paths:
      - results/*
    expire_in: 5 months

## Runs tests using pa11y ##
.pa11y_test:
  stage: test
  image: [path to image, e.g. the one generated by https://github.com/ryan-l-robinson/pa11y-Docker-GitLab]
  script:
    # Use pa11y-ci's built-in function for scanning from a sitemap. #
    - pa11y-ci --sitemap $SITEMAP_URL --config /opt/pa11y/config.json --reporter=json > results.json
  # Show as warning but don't stop execution of later jobs if failure. #
  allow_failure: true
  # Save the reports for 5 months. #
  artifacts:
    when: always
    paths:
      - results.json
    expire_in: 5 months